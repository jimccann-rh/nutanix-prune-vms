---
- name: Prune VM's via Prism Central
  hosts: all
  gather_facts: true
  vars:
    deletevms: false
    systems: []
    system_to_delete: []
    system_to_skip: []
    api_url_v3: "https://{{ prism_url }}:9440/api/nutanix/v3"
    prism_url: "{{ env }}"
    api_url_v1: "https://{{ prism_url }}:9440/PrismGateway/services/rest/v1"
    update_prism_admin_str: "dpp/data/nutanix/prism/central:username"
    update_prism_password_str: "dpp/data/nutanix/prism/central:password"
#    hv_credential_string: "auth_method=approle url={{ hvurl }} role_id={{ dpp_hcv_role_id }} secret_id={{ dpp_hcv_secret_id }}"
#    hvurl: "{{ lookup('env', 'ANSIBLE_HASHI_VAULT_ADDR') }}"
#    dpp_hcv_role_id: "{{ lookup('env', 'ANSIBLE_HASHI_VAULT_ROLE_ID') }}"
#    dpp_hcv_secret_id: "{{ lookup('env', 'ANSIBLE_HASHI_VAULT_SECRET_ID') }}"
    initalize: false
    overtime: 172800 #set time in seconds 48hrs

  pre_tasks:
    - name: Creating hibernation trigger file
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.hibernationoff"
        state: touch
        mode: 0744
      when: initalize | bool

    - name: Set facts from Hashi vault
      ansible.builtin.set_fact:
        prism_user: "{{ lookup('community.general.hashi_vault', update_prism_admin_str + ' ' + hv_credential_string) }}"
        prism_password: "{{ lookup('community.general.hashi_vault', update_prism_password_str + ' ' + hv_credential_string) }}"
      no_log: true
      delegate_to: localhost

    - name: Load var files for VMs to skip
      ansible.builtin.include_vars:
        file: "{{ item }}"
        name: "incl_vars_{{ item | basename | splitext | first }}"
      with_fileglob:
        - skipvmuuid/*.yml
      delegate_to: localhost

    - name: Check that trigger file exits
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.hibernationoff"
      register: stat_result

  tasks:
    - name: Purge VMs
      block:
        - name: Merge skip vmuuid list
          ansible.builtin.set_fact:
            skipvmuuidlist: "{{ skipvmuuidlist | default([]) + [lookup('vars', item)] }}"
          loop: "{{ query('varnames', '^incl_vars_(.*)$') }}"

        - name: Create skip vmuuid list
          ansible.builtin.set_fact:
            skipvmuuid: "{{ skipvmuuid | default() }} + {{ item.key }} = {{ item.value }}"
          with_dict: "{{ skipvmuuidlist }}"

        - name: List env system
          ansible.builtin.debug:
            msg:
              - "{{ env }}"
              - "{{ prism_user }}"

        - name: Auths to the cluster
          ansible.builtin.uri:
            url: "{{ api_url_v3 }}/clusters/list"
            body:
              kind: cluster
              offset: 0
              length: 10
            method: POST
            validate_certs: false
            force_basic_auth: true
            body_format: json
            user: "{{ prism_user }}"
            password: "{{ prism_password }}"
            status_code: 200
            return_content: true
          register: login
          no_log: true

        - name: Sets fact for session cookie
          ansible.builtin.set_fact:
            session_cookie: "{{ login.set_cookie }}"

        - name: Gets VMs list
          ansible.builtin.uri:
            url: "{{ api_url_v3 }}/vms/list"
            body:
              kind: vm
              offset: 0
              length: 100
            method: POST
            validate_certs: false
            body_format: json
            status_code: 200
            headers:
              Cookie: "{{ session_cookie }}"
          register: vms_list

        - name: Gets VM metadata from its name
          ansible.builtin.set_fact:
            vm_entities: "{{ vms_list.json.entities }}"

        - name: Show specific vm info
          ansible.builtin.debug:
            msg:
              - "{{ item.metadata.creation_time }} **** {{ item.spec.name }} **** {{ item.metadata.uuid }}"
          loop: "{{ vm_entities }}"
          tags:
            - never

        - name: Loop vms
          ansible.builtin.include_tasks: vmdelete.yml
          loop: "{{ vm_entities }}"
          loop_control:
            label: "{{ item.spec.name }}"

        - name: List all systems
          ansible.builtin.debug:
            msg:
              - "{{ systems }}"

        - name: List all systems to be DELETED
          ansible.builtin.debug:
            msg:
              - "{{ system_to_delete }}"

        - name: List all systems to be skipped
          ansible.builtin.debug:
            msg:
              - "{{ system_to_skip }}"

        - name: List all systems to be skipped from merged list
          ansible.builtin.debug:
            msg:
              - "{{ skipvmuuid }}"
              - "{{ skipvmuuidlist }}"
          tags:
            - never

        - name: Execute tracepath
          ansible.builtin.command: "tracepath www.google.com"
          register: result
          changed_when: result.rc != 0
          tags:
            - debugs
            - never

        - name: Show result
          ansible.builtin.debug:
            msg: "{{ result['stdout_lines'] }}"
          tags:
            - never

      when: stat_result.stat.exists
